Intuition
I want to figureout the element or elements which is peak

Approach
applying basic binary seach but this time I want to make sure if mid >mid-1 then my peak on its right side move low to mid+1 else if mid less than mid+1 then my peak on the left and edge cases if n==0 return -1 if n==1 return 1 and low =1 and high =n-2 because if my first element > 2nd elemnt as we assume negative index is - infinity so then obviously my first element i bigger than second and negative and simlarly n-2 lesser than n-1 and we hypotheticall assume n is - infinity then n-1 is bigger than n and n-2

Complexity
Time complexity:
O(logn)

Space complexity:
O(1)

Code
class Solution(object):
    def findPeakElement(self, nums):
        n=len(nums)
        ans=0
        low=1
        high=n-2
        if n==1:
            return 0
        if nums[n-1]>nums[n-2]:
            return n-1
        while low<=high:
            mid=low+(high-low)//2
            if nums[mid]>nums[mid-1] and nums[mid]> nums[mid+1]:
                ans=mid
                return ans
            elif nums[mid]>nums[mid-1]:
                low=mid+1
            else:
                high=mid-1
        return ans
