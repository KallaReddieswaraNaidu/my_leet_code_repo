Intuition
Approach
Using Floyd cycle detection state that if there is a slow and fast pointer they must meet at one point if there is a loop because once if the enter into loop the distance between two pointers will reduce gradually

Complexity
Time complexity:
It is O(N) because till the time it reach two pointers at the same time they consider them as n nodes

Space complexity:
Code
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        current_node,next_node = head, head
        while next_node and next_node.next:
            current_node=current_node.next
            next_node=next_node.next.next
            if(current_node==next_node):
                return True
        return False
